<!DOCTYPE html>
<html>
	<head>
		<title>Komprimierung von Rastergrafiken</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<script>

			// global scripts
			function toggleText() {
				var textElements = document.getElementsByClassName('text');
				var state = textElements[0].style.display=='none' ? '' : 'none';
				for (var i=0; i<textElements.length; i++) {
					textElements[i].style.display = state;
				}
				document.getElementById('toggle-text').style.setProperty('text-decoration',state ? 'none' : '');
			}
			function toggleExercises() {
				var section = document.getElementById('exercises');
				var state = section.style.display=='none' ? '' : 'none';
				section.style.display = state;
				document.getElementById('toggle-exercises').style.setProperty('text-decoration',state ? 'none' : '');
			}

			// initialize default values
			var dim = {x: 5, y: 5};
			var size = 40;

			var example = {
				palette: {'w': '#ffffff', 's': '#000000'},
				linebreak: ':',
				picture: 'wwwwwwwwwwwwwwwwwwwwwwwwwwwwww:wwwwwwwwwwwwwwwwwwwwwwwwwwwwww:wwwwwsssssssssssssssssssssssww:wwwwssssssssssssssssssssssssww:wwwsssssssssssssssssssssssssww:wwssssssssssssssssssssssssssww:wssswwwsssssswwwwwssssswwwwwww:wsswwwwsssssswwwwwssssswwwwwww:wswwwwwsssssswwwwwssssswwwwwww:wwwwwwwsssssswwwwwsssswwwwwwww:wwwwwwwsssssswwwwssssswwwwwwww:wwwwwwwsssssswwwwssssswwwwwwww:wwwwwwwsssssswwwwssssswwwwwwww:wwwwwwwsssssswwwwssssswwwwwwww:wwwwwwwsssssswwwwssssswwwwwwww:wwwwwwssssssswwwwssssswwwwwwww:wwwwwwssssssswwwwssssswwwwwwww:wwwwwwssssssswwwwssssswwwwwwww:wwwwwwsssssswwwwwssssswwwwwwww:wwwwwwsssssswwwwwssssswwwwwwww:wwwwwwsssssswwwwwssssswwwwwwww:wwwwwwsssssswwwwwsssssswwwwwww:wwwwwssssssswwwwwwssssswwwwwsw:wwwwwssssssswwwwwwsssssswwsssw:wwwwwssssssswwwwwwwssssssssssw:wwwwwssssssswwwwwwwsssssssssww:wwwwwssssssswwwwwwwsssssssssww:wwwwwssssssswwwwwwwwsssssswwww:wwwwwwwwwwwwwwwwwwwwwwwwwwwwww:wwwwwwwwwwwwwwwwwwwwwwwwwwwwww'
			}

			// handle palette inputs
			var palette = {'w': '#ffffff', 's': '#000000'}
			function addColor(hex,char) {
				var paletteElements = document.getElementsByClassName('palette');
				var newColor = paletteElements[0].cloneNode(true);
				newColor.children[0].value = typeof(hex)=='string' ? hex : '#000000';
				newColor.children[1].value = typeof(char)=='string' ? char : '';
				paletteElements[0].parentElement.insertBefore(newColor,document.getElementById('palette-add'));
			}
			function setPalette(newPalette) {
				var paletteElements = document.getElementsByClassName('palette');
				for (var i=paletteElements.length-1; i>0; i--) {
					paletteElements[i].remove();
				}
				var chars = Object.keys(newPalette);
				for (var i=0; i<chars.length; i++) {
					addColor(newPalette[chars[i]],chars[i]);
				}
				paletteElements[0].remove();
				getPalette();
			}
			function getPalette() {
				var paletteElements = document.getElementsByClassName('palette');
				palette = {};
				for (var i=0; i<paletteElements.length; i++) {
					var char = paletteElements[i].children[1].value;
					if (char!='')
						palette[char] = paletteElements[i].children[0].value;
				}
				redraw();
			}
			function handlePaletteKey(event) {
				var paletteElements = document.getElementsByClassName('palette');
				var input = event.target;
				for (var i=0; i<paletteElements.length; i++) {
					if (paletteElements[i]==input.parentElement)
						var index = i;
				}
				switch (event.keyCode) {
					case 8:
					case 46:
						if (paletteElements.length>2 && input.value=='') {
							input.parentElement.remove();
							getPalette();
							if (index!=undefined) {
								if (event.keyCode==46 && paletteElements.length>index)
									paletteElements[index].children[1].focus();
								else
									paletteElements[index-1].children[1].focus();
							}
							event.preventDefault();
						}
						break;
				}
			}

			// handle linebreak input
			var linebreak = ',';
			function setLinebreak(char) {
				document.getElementById('linebreak').value = char;
				getLinebreak();
			}
			function getLinebreak() {
				var input = document.getElementById('linebreak');
				if (input.value!='') {
					linebreak = input.value;
				}
			}

			function decode(str) {
				var rgxh = new RegExp('^([0-9]+)'+linebreak,'');
				var head = str.match(rgxh);
				if (head!=null) {
					str = str.replace(head[0],'');
					head = parseInt(head[1]);
				}
				var rgxb = new RegExp('([0-9]+)(['+Object.keys(palette).join('')+']{1})','g');
				var body = str.replace(rgxb,function(match,rep,char) {
					return char.repeat(parseInt(rep));
				});
				return {body: body, head: head};
			}

			function validate() {
				var input = document.getElementById('input');
				var pos = input.selectionStart;
				var origin = input.value;
				input.value = origin.split('').filter(function(char) {
					return Object.keys(palette).indexOf(char)!=-1 || (!isNaN(char) && char!=' ') || char==linebreak;
				}).join('');
				if (input.value.length!=origin.length)
					input.setSelectionRange(pos-1,pos-1);
				document.getElementById('compressing').setAttribute('data-step',0);
			}

			function draw() {
				var canvas = document.getElementById('image');
				var ctx = canvas.getContext('2d');
				ctx.clearRect(0,0,canvas.width,canvas.height);

				var rawinput = document.getElementById('input').value;
				var input = decode(rawinput);
				var cur = {x: 0, y: 0};
				var maxval = input.head!=null ? input.head : 5;
				var max = {x: maxval, y: maxval};

				input.body.split('').forEach(function(char) {
					if (Object.keys(palette).indexOf(char)!=-1) {
						ctx.fillStyle = palette[char];
						ctx.fillRect(size*cur.x,size*cur.y,size,size);
						cur.x += 1;
						max.x = Math.max(cur.x,max.x);
					}
					if (char==linebreak || (input.head!=null && cur.x>=input.head)) {
						cur.x = 0;
						cur.y += 1;
						max.y = Math.max(cur.y+1,max.y);
					}
				});
				if (cur.x==0 && max.y>maxval)
					max.y -= 1;

				if (max.x!=dim.x) {
					dim.x = max.x;
					redraw();
				}
				else if (max.y!=dim.y) {
					dim.y = max.y;
					redraw();
				}
				document.getElementById('input-length').textContent = rawinput.length>0 ? rawinput.length+' Zeichen' : '';
				// generate uncompressed input
				var plain = decode(rawinput).body;
				if (input.head!=null) {
					var rows = [];
					while (plain.length>0) {
							rows.push(plain.substr(0,parseInt(input.head)));
							plain = plain.substr(parseInt(input.head));
					}
					plain = rows.join(linebreak);
				}
				document.getElementById('compressing').setAttribute('data-raw',plain);
			}

			function redraw() {
				var canvas = document.getElementById('image');
				canvas.setAttribute('width',canvas.width);
				size = canvas.width/dim.x;
				canvas.setAttribute('height',size*dim.y);
				draw();
			}

			function compress(step) {
				var plain = document.getElementById('compressing').getAttribute('data-raw');
				var step = Math.max(Math.min(step==undefined ? parseInt(document.getElementById('compressing').getAttribute('data-step'))+1 : step,5),0);
				var jumped = 0;
				// uncompressed input
				document.getElementById('compressing').textContent = plain;
				var length = plain.length;
				document.getElementById('compressing-length').textContent = length>0 ? length+' Zeichen' : '';
				if (step>0) {
					// check for rectangular picture
					var rows = plain.split(linebreak);
					var prefix = rows[0].length>0 ? rows[0].length+linebreak : '';
					for (var i=1; i<rows.length; i++) {
						if (rows[i].length!=rows[0].length)
							prefix = '';
					}
					if (prefix!='') {
						// highlight rows
						document.getElementById('compressing').innerHTML = rows.join('<span class="highlight">'+linebreak+'</span>');
						if (step>1) {
							// condense linebreaks
							var rgxl = new RegExp(linebreak,'g');
							plain = plain.replace(rgxl,'');
							document.getElementById('compressing').innerHTML = '<span class="highlight">'+prefix+'</span>'+plain;
							var length = prefix.length+plain.length;
							document.getElementById('compressing-length').textContent = length>0 ? length+' Zeichen' : '';
						}
					}
					else
						jumped = 2;
				}
				// find consecutives
				if (step+jumped>2) {
					var rgxc = new RegExp('('+Object.keys(palette).join('{2,}|')+'{2,})','g');
					plain = plain.replace(rgxc,function(match,consec) {
						switch (step+jumped) {
							case 3:
								return '<span class="highlight variants">'+consec+'</span>';
							case 4:
								return '<span class="highlight variants">'+consec.length+consec[0]+'</span>';
							default:
								return consec.length+consec[0];
						}
					});
					document.getElementById('compressing').innerHTML = prefix+plain;
					plain = plain.replace(/(<span class=\"highlight variants\">|<\/span>)/g,'');
					var length = prefix.length+plain.length;
					document.getElementById('compressing-length').textContent = length>0 ? length+' Zeichen' : '';
				}
				document.getElementById('compressing').setAttribute('data-step',Math.min(step,5-jumped));
				return length;
			}

			function rate() {
				var rate = compress(6)/compress(0);
				document.getElementById('rate').textContent = (Math.round(1000-1000*rate)/10).toString().replace('.',',');
			}

			function drawExample() {
				setPalette(example.palette);
				setLinebreak(example.linebreak);
				document.getElementById('input').value = example.picture;
				validate();
				draw();
				rate();
			}

		</script>

		<style>
			:root {
				--border-default-style: 1px #aaa solid;
				--small-gap: 4px;
				--large-gap: 8px;
			}
			* {
				box-sizing: border-box;
			}
			body {
				font-family: Sans-Serif;
				width: 80%;
				max-width: 1200px;
				margin: 20px auto;
			}
			header, main, footer {
				padding: 20px;
			}
			header, h1, h2, h3, h4 {
				font-family: Serif;
				font-variant: small-caps;
			}
			header {
				border-bottom: var(--border-default-style);
			}
			header input {
				float: right;
				text-decoration: line-through;
				padding: var(--large-gap);
				margin: 1em var(--large-gap);
				font-size: 1.33em;
				width: 2em;
				font-family: Serif;
			}
			footer {
				font-size: 1.2em;
				font-family: Serif;
				font-variant: small-caps;
				border-top: var(--border-default-style);
			}
			footer a {
				float: right;
				text-align: right;
				padding: 0 var(--large-gap) var(--large-gap);
				color: #000;
				text-decoration: none;
			}
			footer a.prev::before {
				content: '« ';
			}
			footer a.next::after {
				content: ' »';
			}
			section {
				overflow: auto;
			}
			input {
				border: var(--border-default-style);
				padding: var(--small-gap);
				font-family: monospace;
				font-size: 16px;
			}
			input[type=color] {
				border: var(--border-default-style);
				padding: 0 var(--small-gap);
			}
			input:invalid{
				background-color: #fbb;
			}
			#input, #compressing {
				width: calc(100% - 100px);
			}
			#input-length, #compressing-length {
				padding-left: var(--large-gap);
				width: 100px;
			}
			#image-frame {
				border: var(--border-default-style);
				width: 480px;
				min-width: 50%;
				max-width: 100%;
				padding: var(--small-gap);
				margin: var(--large-gap) auto;
			}
			#image {
				background-color: #eee;
				width: 100%;
			}
			.palette, #palette-add, #palette-linebreak {
				float: left;
				width: 80px;
				margin: 0 var(--large-gap) var(--large-gap) 0;
			}
			.palette input, #palette-add input, #palette-linebreak input, #palette-linebreak span {
				width: 100%;
				height: 28px;
			}
			#palette-linebreak span {
				display: block;
				overflow: hidden;
				border: var(--border-default-style);
				background-color: buttonface;
				padding: 6px 2px;
				font-size: 12px;
				text-align: center;
				vertical-align: middle;
			}
			#compressing {
				display: inline-block;
				font-family: monospace;
				border: var(--border-default-style);
				margin: var(--small-gap) 0;
				padding: var(--small-gap);
				word-wrap: break-word;
			}
			#compressing:empty {
				display: none;
			}
			#compressing .highlight {
				background-color: #ff9;
			}
			#compressing .highlight.variants:nth-child(3n) {
				background-color: #f9f;
			}
			#compressing .highlight.variants:nth-child(3n+1) {
				background-color: #9ff;
			}
			.compressing-control {
				height: 2em;
				width: 2em;
			}
		</style>
	</head>
	<body onload="redraw();" onresize="redraw();">
		<header>
			<input id="toggle-exercises" type="button" value="A" onclick="toggleExercises();" />
			<input id="toggle-text" type="button" value="T" onclick="toggleText();" />
			<h1>Komprimierung von Rastergrafiken</h1>
		</header>
		<main>
			<section>
				<h2 class="text">Einleitung</h2>
				<p class="text">Es gibt viele Verfahren, eine Rastergrafik zu komprimieren. Das im Folgenden dargestellte Verfahren erhält die vollständigen Bildinformationen. Es wird deshalb als ein verlustfreies Kompressionsverfahren bezeichnet.</p>
			</section>
			<section>
				<h2>Zeichentabelle</h2>
				<form>
					<div id="palette-linebreak">
						<span>Trennzeichen</span>
						<input id="linebreak" type="text" maxlength="1" required pattern="[^0-9]{1}" value="," oninput="getLinebreak();" />
					</div>
					<div class="palette">
						<input type="color" value="#000000" onchange="getPalette();" />
						<input type="text" maxlength="1" required pattern="[A-Za-z]{1}" value="s" oninput="getPalette();" onkeydown="handlePaletteKey(event);" />
					</div>
					<div class="palette">
						<input type="color" value="#FFFFFF" onchange="getPalette();" />
						<input type="text" maxlength="1" required pattern="[A-Za-z]{1}" value="w" oninput="getPalette();" onkeydown="handlePaletteKey(event);" />
					</div>
					<div id="palette-add">
						<input type="button" value="+" onclick="addColor();" />
					</div>
				</form>
			</section>
			<section>
				<h2>Eingabe</h2>
				<input type="text" id="input" oninput="validate(); draw(); rate();" /><span id="input-length"></span>
			</section>
			<section>
				<h2>Bild</h2>
				<div id="image-frame">
					<canvas id="image" ondblclick="drawExample();"></canvas>
				</div>
			</section>
			<section>
				<h2>Komprimierung</h2>
				<p>Durch Gruppierung gleicher Zeichen und Angabe einer festen Zeilenlänge kann die Länge der kodierten Zeichenkette deutlich verkürzt werden. In dem aktuellen Bild lassen sich durch diese Kompressionsverfahren <span id="rate">0</span>% der Daten einsparen.</p>
				<input class="compressing-control" type="button" value="&#9664;" onclick="compress(parseInt(document.getElementById('compressing').getAttribute('data-step'))-1);" />
				<input class="compressing-control" type="button" value="&#9654;" onclick="compress();" />
				<br />
				<span id="compressing"></span><span id="compressing-length"></span>
			</section>
			<section id="exercises">
				<h2>Aufgabe</h2>
				<p>Beschreibe welche Bilder mit dem beschriebenen Verfahren besonders stark komprimiert werden.</p>
			</section>
		</main>
		<footer>
			<a class="next" href="rgb_farbraum.htm">RGB-Farbraum</a>
			<a class="prev" href="farbige_rastergrafiken.htm">Kodierung farbiger Rastergrafiken</a>
			<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="88" height="31" viewBox="0 0 88 31" baseProfile="basic" version="1.1">
				<g id="surface1">
					<path style=" stroke:none;fill-rule:nonzero;fill:rgb(66.666667%,69.803922%,67.058824%);fill-opacity:1;" d="M 2.300781 0.570313 L 85.429688 0.71875 C 86.589844 0.71875 87.628906 0.546875 87.628906 3.039063 L 87.527344 30.414063 L 0.203125 30.414063 L 0.203125 2.9375 C 0.203125 1.707031 0.324219 0.570313 2.300781 0.570313 Z "/>
					<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 86.351563 0.199219 L 1.648438 0.199219 C 0.738281 0.199219 0 0.9375 0 1.847656 L 0 30.628906 C 0 30.832031 0.167969 31 0.371094 31 L 87.628906 31 C 87.832031 31 88 30.832031 88 30.628906 L 88 1.847656 C 88 0.9375 87.261719 0.199219 86.351563 0.199219 Z M 1.648438 0.945313 L 86.351563 0.945313 C 86.851563 0.945313 87.253906 1.347656 87.253906 1.847656 C 87.253906 1.847656 87.253906 13.46875 87.253906 21.851563 L 26.515625 21.851563 C 24.296875 25.863281 20.023438 28.585938 15.117188 28.585938 C 10.207031 28.585938 5.933594 25.863281 3.714844 21.851563 L 0.746094 21.851563 C 0.746094 13.46875 0.746094 1.847656 0.746094 1.847656 C 0.746094 1.347656 1.148438 0.945313 1.648438 0.945313 Z "/>
					<path style=" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:1;" d="M 46.753906 23.984375 L 50.832031 23.984375 L 50.832031 24.738281 L 48.230469 27.886719 L 50.90625 27.886719 L 50.90625 28.832031 L 46.679688 28.832031 L 46.679688 28.074219 L 49.28125 24.925781 L 46.753906 24.925781 L 46.753906 23.984375 M 51.8125 23.984375 L 55.183594 23.984375 L 55.183594 24.925781 L 53.0625 24.925781 L 53.0625 25.832031 L 55.058594 25.832031 L 55.058594 26.773438 L 53.0625 26.773438 L 53.0625 27.886719 L 55.253906 27.886719 L 55.253906 28.832031 L 51.8125 28.832031 L 51.8125 23.984375 M 58.132813 26.132813 C 58.394531 26.132813 58.582031 26.082031 58.695313 25.984375 C 58.808594 25.890625 58.867188 25.730469 58.867188 25.503906 C 58.867188 25.285156 58.808594 25.125 58.695313 25.03125 C 58.582031 24.9375 58.394531 24.890625 58.132813 24.890625 L 57.605469 24.890625 L 57.605469 26.132813 L 58.132813 26.132813 M 57.605469 26.996094 L 57.605469 28.832031 L 56.355469 28.832031 L 56.355469 23.984375 L 58.265625 23.984375 C 58.902344 23.984375 59.371094 24.089844 59.667969 24.304688 C 59.964844 24.519531 60.117188 24.855469 60.117188 25.320313 C 60.117188 25.640625 60.039063 25.902344 59.882813 26.109375 C 59.730469 26.316406 59.496094 26.464844 59.183594 26.5625 C 59.355469 26.601563 59.507813 26.691406 59.640625 26.832031 C 59.777344 26.964844 59.914063 27.175781 60.054688 27.453125 L 60.734375 28.832031 L 59.402344 28.832031 L 58.8125 27.625 C 58.691406 27.382813 58.570313 27.21875 58.445313 27.128906 C 58.324219 27.039063 58.164063 26.996094 57.960938 26.996094 L 57.605469 26.996094 M 63.6875 24.800781 C 63.304688 24.800781 63.011719 24.941406 62.800781 25.222656 C 62.589844 25.503906 62.484375 25.902344 62.484375 26.410156 C 62.484375 26.921875 62.589844 27.316406 62.800781 27.597656 C 63.011719 27.878906 63.304688 28.019531 63.6875 28.019531 C 64.070313 28.019531 64.367188 27.878906 64.578125 27.597656 C 64.785156 27.316406 64.890625 26.921875 64.890625 26.410156 C 64.890625 25.902344 64.785156 25.503906 64.578125 25.222656 C 64.367188 24.941406 64.070313 24.800781 63.6875 24.800781 M 63.6875 23.894531 C 64.464844 23.894531 65.078125 24.117188 65.519531 24.5625 C 65.960938 25.011719 66.179688 25.625 66.179688 26.410156 C 66.179688 27.195313 65.960938 27.808594 65.519531 28.253906 C 65.078125 28.703125 64.464844 28.925781 63.6875 28.925781 C 62.910156 28.925781 62.300781 28.703125 61.855469 28.253906 C 61.414063 27.808594 61.195313 27.195313 61.195313 26.410156 C 61.195313 25.625 61.414063 25.011719 61.855469 24.5625 C 62.300781 24.117188 62.910156 23.894531 63.6875 23.894531 "/>
					<path style=" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:1;" d="M 25.121094 14.578125 C 25.125 20.097656 20.648438 24.578125 15.125 24.582031 C 9.605469 24.585938 5.125 20.113281 5.121094 14.589844 C 5.121094 14.585938 5.121094 14.582031 5.121094 14.578125 C 5.117188 9.054688 9.59375 4.578125 15.113281 4.574219 C 20.636719 4.570313 25.117188 9.042969 25.121094 14.566406 C 25.121094 14.570313 25.121094 14.574219 25.121094 14.578125 Z "/>
					<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 23.25 6.433594 C 25.464844 8.652344 26.574219 11.367188 26.574219 14.578125 C 26.574219 17.789063 25.484375 20.476563 23.304688 22.636719 C 20.992188 24.910156 18.261719 26.046875 15.105469 26.046875 C 11.992188 26.046875 9.304688 24.921875 7.050781 22.664063 C 4.792969 20.410156 3.667969 17.714844 3.667969 14.578125 C 3.667969 11.441406 4.792969 8.726563 7.050781 6.433594 C 9.246094 4.214844 11.933594 3.109375 15.105469 3.109375 C 18.316406 3.109375 21.03125 4.214844 23.25 6.433594 Z M 8.542969 7.925781 C 6.667969 9.820313 5.730469 12.035156 5.730469 14.582031 C 5.730469 17.125 6.660156 19.324219 8.511719 21.175781 C 10.367188 23.03125 12.578125 23.960938 15.140625 23.960938 C 17.703125 23.960938 19.929688 23.023438 21.824219 21.148438 C 23.621094 19.410156 24.519531 17.21875 24.519531 14.582031 C 24.519531 11.960938 23.605469 9.738281 21.78125 7.910156 C 19.953125 6.085938 17.742188 5.171875 15.140625 5.171875 C 12.539063 5.171875 10.339844 6.089844 8.542969 7.925781 Z M 13.476563 13.460938 C 13.1875 12.835938 12.761719 12.523438 12.1875 12.523438 C 11.175781 12.523438 10.671875 13.207031 10.671875 14.566406 C 10.671875 15.925781 11.175781 16.605469 12.1875 16.605469 C 12.855469 16.605469 13.332031 16.277344 13.617188 15.613281 L 15.019531 16.359375 C 14.351563 17.542969 13.351563 18.136719 12.015625 18.136719 C 10.984375 18.136719 10.15625 17.824219 9.539063 17.191406 C 8.917969 16.558594 8.609375 15.6875 8.609375 14.578125 C 8.609375 13.488281 8.925781 12.621094 9.566406 11.980469 C 10.207031 11.335938 11.003906 11.015625 11.957031 11.015625 C 13.371094 11.015625 14.378906 11.574219 14.992188 12.6875 Z M 20.066406 13.460938 C 19.78125 12.835938 19.359375 12.523438 18.808594 12.523438 C 17.777344 12.523438 17.261719 13.207031 17.261719 14.566406 C 17.261719 15.925781 17.777344 16.605469 18.808594 16.605469 C 19.476563 16.605469 19.945313 16.277344 20.210938 15.613281 L 21.644531 16.359375 C 20.976563 17.542969 19.976563 18.136719 18.644531 18.136719 C 17.613281 18.136719 16.789063 17.824219 16.171875 17.191406 C 15.550781 16.558594 15.242188 15.6875 15.242188 14.578125 C 15.242188 13.488281 15.554688 12.621094 16.183594 11.980469 C 16.8125 11.335938 17.613281 11.015625 18.585938 11.015625 C 19.996094 11.015625 21.003906 11.574219 21.613281 12.6875 Z "/>
					<path style=" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:1;" d="M 60.03125 10.878906 C 60.03125 15.128906 58.308594 18.578125 56.183594 18.578125 C 54.054688 18.578125 52.332031 15.128906 52.332031 10.878906 C 52.332031 6.625 54.054688 3.179688 56.183594 3.179688 C 58.308594 3.179688 60.03125 6.625 60.03125 10.878906 Z "/>
					<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 56.429688 2.417969 C 51.582031 2.417969 50.359375 6.996094 50.359375 10.875 C 50.359375 14.757813 51.582031 19.332031 56.429688 19.332031 C 61.28125 19.332031 62.5 14.757813 62.5 10.875 C 62.5 6.996094 61.28125 2.417969 56.429688 2.417969 Z M 56.429688 5.609375 C 56.628906 5.609375 56.808594 5.636719 56.976563 5.679688 C 57.324219 5.980469 57.496094 6.394531 57.160156 6.976563 L 53.929688 12.914063 C 53.832031 12.160156 53.816406 11.425781 53.816406 10.875 C 53.816406 9.167969 53.9375 5.609375 56.429688 5.609375 Z M 58.847656 8.34375 C 59.019531 9.257813 59.042969 10.207031 59.042969 10.875 C 59.042969 12.585938 58.925781 16.144531 56.429688 16.144531 C 56.234375 16.144531 56.054688 16.125 55.886719 16.082031 C 55.851563 16.074219 55.824219 16.0625 55.792969 16.050781 C 55.742188 16.035156 55.6875 16.019531 55.640625 16 C 55.082031 15.765625 54.734375 15.335938 55.238281 14.582031 Z "/>
				</g>
			</svg>
		</footer>
	</body>
</html>
